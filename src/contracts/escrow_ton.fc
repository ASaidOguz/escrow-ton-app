#include "imports/stdlib.fc";
;; operation approve created with c prefix, arbiter can approve

const op::approve = "op::approve"c; 

;;operation cancel created with c prefix,arbiter can cancel in case of any kind of dispute;

const op::cancel = "op::cancel"c; 

global int ctx_id; 
global int approved;
global int canceled;  
global slice arbiter;     ;;ariter who approve transfer by ...
global slice beneficiary; ;;beneficiary who receives contracts fund after transfer approvment...
global slice owner;       ;;owner of the escrow contract initiated in deployment...  
global slice job_description; ;;small job description 

const int computation_fee = 1000000000; ;;computational gas consumption confiscated from non-arbiter
const int min_arbiter_call = 1500000000; ;;min arbiter approve message sending fee 


() load_data () impure {
  slice ds = get_data().begin_parse();
  ctx_id = ds~load_uint(32);
  approved = ds~load_uint(2);
  canceled = ds~load_uint(2);
  arbiter = ds~load_msg_addr();
  beneficiary = ds~load_msg_addr();
  owner = ds~load_msg_addr();
  job_description = ds~load_ref().begin_parse();
}
() save_data(int newapproved,int newcanceled) impure inline {
    load_data();
    set_data(begin_cell()
            .store_uint(ctx_id,32)
            .store_uint(newapproved,2)
            .store_uint(newcanceled,2)
            .store_slice(arbiter)
            .store_slice(beneficiary)
            .store_slice(owner)
            .store_ref( begin_cell()
                        .store_slice(job_description)
                        .end_cell())
            .end_cell()
    );
}


() transfermsg(slice beneficiary) impure {
  load_data();
    var message = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(beneficiary)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice("Hello,beneficiary Your payment has been confirmed!")
        .end_cell();

    send_raw_message(message, 128);

}
() cancelmsg(slice owner) impure {
  load_data();
  var message = begin_cell()
      .store_uint(0x10,6)
      .store_slice(owner)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0, 32)
      .store_slice("Hello,Arbiter canceled the transaction!")
      .end_cell();
     send_raw_message(message,128);
}

() nonarbitermsg(sender,sender_value) impure {
     load_data();
     var message = begin_cell()
         .store_uint(0x10,6)
         .store_slice(sender)
         .store_coins(sender_value)
         .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; 107 zero-bits
         .store_uint(0,32)
         .store_slice("Warning Non-Arbiter Address ,Computation fee will be confiscated!")
         .end_cell();
       send_raw_message(message,3);  
}

() recv_internal (int msg_value,cell in_msg_full,slice in_msg_body) {
     
    throw_unless(187,msg_value > min_arbiter_call); ;;throw exception if the msg value lower then 1.5 TON...

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    load_data();
     if (~ equal_slice_bits(sender_address, arbiter)) {
       int confiscated_value = msg_value - computation_fee;
        nonarbitermsg(sender_address,confiscated_value); ;; confiscate computation fee as TON from non-arbiter user
        return();
    }
    
   
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

   
    if (op == op::approve){
    load_data();
    transfermsg(beneficiary);
    save_data(1,0);
      return();
    }
    if(op == op::cancel){
    load_data();
    cancelmsg(owner);
    save_data(0,1);
      return();
    }
    throw(0xffff);
}

(slice) get_arbiter() method_id {
load_data();
return arbiter;
}

(slice) get_beneficiary() method_id {
load_data();
return beneficiary;
}

slice get_owner() method_id {
  load_data();
  return owner;
}

int get_queryid() method_id {
  load_data();
  return ctx_id;
}

slice get_jobDescription() method_id {
  load_data();
  return job_description;
}

int get_approved() method_id {
  load_data();
  return approved;
}

int get_canceled() method_id {
   load_data();
   return canceled;
}
